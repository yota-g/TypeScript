export {};

let numbers: number[] = [1, 2, 3];
// let numbers = [1, 2, 3]; と入力して、型推論で: number[]が出てくるのでそれを使用してアノテーションする
//型はこうだよと宣言している。
//array型は別の書き方がある。非推奨。こんな書き方をする人もいるんだなという感覚で見ること。
//let numbers2: Array<number> = [1, 2, 3];という書き方もあり。だが、推奨は: number[]。内容は同じだが。
//Array interfaceオリジナルな型を指定する時に利用できるもの。
//<>もジェネリクス。型を抽象化するもの。　let strings2: Array<string> = ['tokyo','osaka']; string型の要素を持つ配列を作ることができる。

let strings: string[] = ['typescript', 'javascript', 'coffeescript'];
// ポインターをstrings に持っていくと型推論があるのであっていればコピーして貼り付けすること。
//: string[]の型指定が正解

//2次元配列の場合。　要素は全て数字の場合
let nijigenhairetu: number[][]= [[50,100],[150,300]]
//他と同様で変数の上にカーソルを持っていくと型推論が出ているのであっていれば２次元配列の型を指定することができる。

//配列の要素の中身がバラバラの場合はどのような感じに指定すればいいのか。
let hairetsu: (string | number | boolean)[] = [1, false, 'Japan'];
//型推論がこれでもされてアノテーションができる。
//　|はorという意味があるもの。「または」。　
//複数の型を並べてそのうち要素がこのうちのどれかに該当するような型ですよという風に指定する時に利用できる。
//[]で配列であることを宣言している。
//複数の型を並べてそのうちのどれかに該当するようなことを共用型という。





