export {};

let profile: [string, number] = ['Ham', 43];
//要素は0にstring, 1にnumberを入れるとする。
//アノテーションをどうつけていくか。共用型（ユニオンタイプス）を付ければ型指定をすることはできる。
//この時点で変数にホバーしても 共用型が推論される。
//だが、これだと型注釈としては不十分。 共用型だと型の順序性を持たせることができない。
//逆転することもできてしまう。profile = [43, 'Ham']; という指定もできる。制約が緩い。データが想定しているものと異なるものになってしまうこともある。
//制約の強いものがtuple型。制約が強いのを持たせることができる。
//: [string, number]で型指定することで、制約の強いtuple型を指定できる。
//profile = [43, 'Ham']; コンパイルエラーが出るようになる。　エラー内容がそれぞれに書かれているようになる。
//想定外の型の挿入を防ぐことができる。全ての要素に対して型を指定できるのがtuple型。型推論では出ないのできっちり覚えるしかない。




