export {}

  //enum型（イナム型）列挙型
//数値の列挙型
//1→jan ,2→febというようにしたい場合に非常に便利
//enum型はデータが複数あるのが通常なので複数形にする。
//今回は1〜12月を格納する。Jau~Decまでに変換できるようにする。
enum Months  {
  January = 1,
  February,
  March,
  April,
  May,
  June,
  July,
  Augusts,
  Septenber,
  October,
  Nobenber,
  Decenber,
}
//{}の中に要素（単語）を列挙していく。
//これで1月から12月まで列挙できる。
//これで完成。列挙型の凄さはシーケンシャルな番号を振り当てることができる。
//January = 0,February = 1
//Months.January;
//(enum member) Months.January = 0　Janはenumのメンバーだよとホバーすると表示される。　
//Months.February;
//=1と表示される。　
//enumで設定された数値が使用できるのかを確認する。
console.log(Months.January);
console.log(Months.February);
//0と1が表示される。
//enumの内部で何が行われているかというと、{}のなかに渡したこれらの要素に対して、先頭から順に０から番号を付与してくれている。　
// jsだとどうゆう風に書くのか。
//const MontsJS = { January: 0,Feburary: 1 ~};みたいに記入しないといけない。キーバリューなのでバリューもきちんと書いてあげないといけない。
//自動での連番を付与することはできないのでミスする可能性がある。
//console.log(MonthsJS.January);とenumのconsole.log(Months.January); は同じ内容を示す。
//enumを使用すると書くコードが少なくて済む。
//自動的に連番を付与してくれて、間違いがへる。enumのメリット。
//自動的に連番を付与して欲しい場合にはenum型を使用するといい。

//少し変なのが実際の月よりマイナス１されているところ。　
//そこが微妙。１月なら１、2月なら２にしたくない？したい。
//挑戦する。 1番先頭のJanuary = 1とオーバライドしてあげると１からに変更できる。
//数値のenum方は各要素に数値を設定することができる。
//数値を列挙できるenum型になr。

//異なるenumの使用方法。文字列のenum型
//文字列のenumなので全て=で初期化してあげる事が大切
enum COLORS {
  RED = '#FFF0000',
  WHITE = '#FFFFFF',
  GREEN = '#008000',
  Blue = '#0000FF',
  //YELLOW = '#FFFF00',
  Black = '#000000'
}
//文字列リテラルを初期化してあげる事で、文字列のenum型を作る事ができる。
//作成したものを使用していく。
let green = COLORS.GREEN;
console.log({green});
//green: '008000'; と列挙型の定義がそのままアクセスされて表示される。
//COLORS.YELLOW;
//列挙型で定義していないものはエラーが出る。　JSだと存在しないキーで入力してもエラーが出ずにバグるだけ。
//tsはエラーば出て、設定していないのがわかるので、追加する必要性に気づく事ができる。
//追加方法は、普通に{} の中に代入する事もできるが別の方法もある。
//便利なやり方　ない対象のものが必要になった時点で、追加したいとなった時
//使う場面の直前で付け足す事ができる。
enum COLORS {
  YELLOW = '#FFFF00'
}
COLORS.YELLOW;
//直前に記入する事でYELLOWにアクセスできるようになる。
//このアクセスの方法は非常に便利。
//追加した場合、追加したつもりになっていると
// enum COLORS {
  // YELLOW = '#FFFF00'
  // GRAY
// }
//GRAYの部分にコンパイルエラーが出て、初期化する必要があると表示してくれる。初期化してあげることも忘れることもない。'#808080'で初期化するとエラーがなくなる。


