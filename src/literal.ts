export {}

// let dayOfTheWeek = '日';
//変数でやるのは曜日を管理すること。
//変数に対してアノテーションをやるとしたら今までの知識をしたら型を: stringで指定するしかない。
// let dayOfTheWeek: string = '日';
//もちろんstring型なので月に変えることも可能。
//dayOfWeek = '月'; 火なども入れることが可能。
//だが、想定外の文字列が設定されるとどうなのか。
//dayOfTheWeek = '31';　文字列だけど想定外の文字列だと型が文字列だけど、全然違うものを設定されると困る。
//この変数では７種類の文字列のみを許容したいというイメージ。
//月〜日　それ以外の文字列はエラーで省きたい。
// let dayOfTheWeek: '日' = '日';
//このように'日'の文字列でアノテーションを指定すると'日’の文字列以外の文字列が記入されるとコンパイルエラーが出る。'日'だけが許容できる。
// dayOfTheWeek = '月';
// dayOfTheWeek = '31';

//stiringとかくと文字列全体。'日'とかけばそれ以外は許容できなくなる。
//このことから今後どうするかというと今のlitearl型とunion型を組み合わせて、日〜土までを許容することができるようになる。
let dayOfTheWeek: '日' | '月' | '火' | '水' | '木' | '金' | '土' = '日';
dayOfTheWeek = '月';
// dayOfTheWeek = '31'; //文字列全てが設定できるわけではなくなる。
// こうすることで日〜土以外の文字列が省かれるようになる。
//日〜土のいずれかだけになる。
//有限なものに設定したい場合literal型を使用する。

//数値のliteral型を学ぶ。月の場合を確認する。
let month: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 = 1;
month = 12;
//month = 13;
//1-12までの数値に限りたい。有限な数値にしたい。
//おかしな数値に上書きされないように有限な数値で制限をする。
//それ以外をエラーにすることができる。
//数値を型に宣言することで宣言した数値のみ適用可能になる。

//booleanのliteral型
//文法上であるだけで普段の例は特にない。
let True: true = true;
// True = false;
//stringやnumberのように無限な数があるような性質の型ではなくて、
//そもそもboolean自体が有限なものでtrueかfalseしかない
//なので、アノテーションによって制約をこれ以上強くする必要はない。
//強いてboolean で型注釈を設定するのであれば: trueとboolean型よりより狭い型で制約ができているようになる。
//bollean型より型安全性は高い。falseが設定できなくなる。

//stringとnumberのliteralは非常に多く使用する。



