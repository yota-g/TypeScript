


5.Node.js
TypeScriptは素のままでは使うことができない。
それをコンパイルしてjsに変換する必要がある。
その専用のコンパイラーライブラリーが必要
それにNode.jsの環境が必要。

TypeScriptから変換されたjsを実行するためにも使用する。
react.angureでもnode.jsを使用

推奨版をダウンロード 
LTS Long Term Supportと言って長期間サポートがついている。
動作保証をしてくれる。
最新版でないとできないということはないのでLTSでいける。

node というコマンドを使用できる。
node -v nodeのバージョンを確認できる。
npm -vもダウンロードしてないとnot foundになる。
ダウンロードするとバージョンが表示される。
which nodeで場所が表示される。

other downloadにprevious releasesに過去のバージョンがあるのでダウンロードできる。
このバージョンを使いたいというのがある時に使用する。
npmの正式名称は、Node Package Managerです。
npmの正式名称からも解るように、Node.jsのパッケージ（Package ）を管理する（Manager）ツールです。
Node.jsのパッケージ（Package）とは、予め用意された便利な機能をまとめたものです。

6.GitHubでリポジトリを作成しよう

 .gitignoreはgitの管理にしたくないようことディレクトリの一覧が記載されている物。
を選択することで、node.jsで予め必要な物を用意してくれている

7.package.jsonを作ろう
typescriptの環境を作る上でパッケージ管理が必要なのだがそれを管理してくれるのが、package.jsonである。
講義ではbranchを切って切り替えている。
git push origin HEADを使う
カレントブランチをリモートの同名ブランチにプッシュするときは、以下コマンドでOKです。わざわざカレントブランチ名を書く必要はありません。便利！
git merge - の-は先ほどまで使用していたbranchを示す。

typescriptをコンパイルするnpmパッケージinstallしてパッケージ管理をやるのでpackage .jsonを作成する。
package.jsonの作成はnpm init コマンドで実施。
初期化処理をして、package.jsonが生成される。
json形式で出力される。デフォルトのままで問題ない。その際は-yをつけること。
npm init -y
標準出力として、バージョンが表示される。
バージョンをあげようというのも出てくるが今回は置いておく

git status で実行するとpackage.jsonのファイルの存在が確認できる。
git diffコマンドで中身を見ることができる。

json形式のデータがファイルの内容として見ることができる。

npm install -g npm to updateだけだとadmin権限がないのでエラーになる。
バージョンアップする際はsudoをつけて、adminできるようにしてダウンロードする。 
sudo ダウンロードコマンドとすることでパスワードが求められるようになる。
これでダウンロードできる



8.typescriptをインストールする。
npmパッケージ

ブラウザでmicrosoft typescript githubで検索することで、GitHubにあるTypeScriptを確認できる。
これはTypeScriptのコンパイラーのソースコードが公開されている。
TypeScriptを導入しないと動かない。
TypeScriptの最新版をダウンロードする。
最新版の確認方法は、npm info typescript
情報を返してくれる。実行した時点でのtypescriptが何版なのかがわかる。
今回は3.7.5のtypescriptを使用する。
バージョンを合わせておくこと。
バージョンを合わせる方法。npm --save-dev install typescript@3.7.5
--save-devこれをつけることでtypescriptは開発環境だけで使用するので
runタイム中にはいらない　なのでこのようなオプションをつけるようにする。範囲が広がってしまうので。
オプションをつけたほうが適切。
ダウンロードすると
package.jsonが変わったのと,package-lock.jsonができている。

git diffで変わった内容を確認。
typescriptの情報が追加されている。
devDependenciesに入っている。

typescriptをjsにコンパイルできるツールが手に入ったので確認していく。
typescriptのソースコードを管理できるディレクトリを作成する。
mkdir ディレクトリ
touch ディレクトリ/ファイル名.ts
typescriptのコードが入っているものの拡張子は.tsになる。

エディタでファイル名.tsを開く。
コードを入力していく。
データの型を入れて記載。ぐらいで現状はOK
typescriptの記法で書いている
このままだと実行できない。jsに変換する必要がある。

変換を行う方法。
tscとターミナルに入力することでコンパイルができる。

tsc ファイル名を入力
command not foundというようになる。
tscはこのプロジェクト配下にのみ有効なものだから
package.jsonの配下のディレクトリのみにしか使えない。
どこにtscのあるのか。
ls ./node_modules/.bin/tscがある。
これを指定して実行する。
./node_modules/.bin/tsc　ディレクトリ名/ファイル名.tsで実行する。　コマンドが長い。
うまい方法はないのか。npxコマンドがある。
プロジェクトに特化した特殊な実行ファイルnode.module配下を探して実行してくれる。
npx tsc ディレクトリ/ファイル名.tsを指定することでコンパイルしてくれる。
 jsができているか確認することでコンパイルできていることが確認できる。
 

ディレクトリ/ファイルの部分に.jsのファイルが作成される。
cat ディレクトリ/ファイル名.jsで中身を覗ける
コンパイルされたjsのファイルが作成されているという風になる。

node ディレクトリ/ファイル.jsを実行するときちんと表示される。
動作確認ができる。
毎回コンパイルコードを書いていくわけにもいかないので、
そうしなくて良いツールを次回紹介。


9.ts-nodeをインストールしよう。
コンパイルしたJSを確認しないと挙動を確認できない。
それを高速に実行して確認することができるようになって
開発のスピードをあげることができる。
ts-node githubで検索して、　
githubのtypestrong /ts-nodeのページへいく。
その中のパッケージをインストールする。

コンパイルされたJSを実行するまでをワンコマンドで実行できるようにできる。
branchをきる。
ts-nodeでバージョン確認
node info ts-nodeで確認
ts-node@8.6.2を今回はダウンロード
npm install --save-dev ts-node@8.6.2でダウンロードする。
git diffで中身を確認

npx ts-node ディレクトリ/ファイル名.tsとすることで
コンパイルしてから実行まで実施してくれる。
ワンコマンドでできる。

ts-nodeをダウンロードすると前回のコマンドをいちいちしなくて良いようになる。

ts-nodeめちゃめちゃ便利
npx ts-node　ディレクトリ名/ファイル名.tsでコンパイルから表示ができるようになる。

commit してリモートにgit push -u origin HEADでpushして、git merge -でマスターにマージをしてからpushする。
コンパイルと実行を一気にする方法。
面倒なことがあって、コードを変更するためにts-codeを毎回変換しないといけないのがめんどくさい
大きい物なら余計に。膨大なコストになってしまうので、面倒なことをやらなくて済むようにしていく。



10.ts-node-devをインストールしよう
タイプスクリプトのコンパイルから実行までをより高速に実施する方法を確認する方法
ts-node-dev githubで検索
Compiles your TS app and restarts when files are modified.のな機能がつく
ファイルが変更される度にコンパイルして実行されるという機能

branchを切って実行していく
npm info ts-node-dev
ts-node-dev@1.0.0-pre.44今回はこれを使用
npm install --save-dev ts-node-dev@1.0.0-pre.44でインストール
git diff package,jsonで想定したバージョンか確認することができるとOK

ts-node-dev githubで使用方法を確認。
README.mdというファイルのUsageをみていく。
ts-node-dev --respawn --transpileOnly server.ts
tsファイルを引数に渡して、毎回ファイルの変更を検知して、コンパイルと実行を行うためには
コンパイルと実行をする場合は--respawn が必要になる。　コンパイルだけやりたい場合は--transpileOnlyをつけるといい
ts-node-devは--save-devでダウンロードしているのでグローバル空間にはないのでnpxが必要。
npx ts-node-dev -respawn ディレクトリ/ファイル名.ts を行うとコンパルをして実行までしてくれる。
vashのプロンプトが返ってこない。ずっと監視されている状態。
ファイルが変更されたら出力される状態。
ctrol cで終了できる

エディタでタイプスクリプトのファイルを開きながら、
vim ディレクトリ/ ファイル.tsで開いて、
:terminarlでターミナルを開いて、
npx ts-node-dev -respawn src/install-type.tsを実行させると
監視中にできる。監視対象はソースの下にあるファイル
CTRL-W w	カーソルを次のウィンドウに移動する
CTRL-W h	カーソルを左のウィンドウに移動する
CTRL-W j	カーソルを下のウィンドウに移動する
CTRL-W k	カーソルを上のウィンドウに移動する
CTRL-W l	カーソルを右のウィンドウに移動する
を利用して移動をして作業する。

編集が終わったら:wでsaveすると監視されていたファイルが修正されたよとわかったので
瞬時にコンパイルされて表示される。変更後の文字列が表示されている。自動で検知してくれるので作業が捗る。シームレスに
:q!は保存せずに終了という意味
高速にコンパイルして実行することができまた何度もできる。
overheadがなく瞬時に手に入れることができる。
これを使用して、講義を行なっていく。
typescriptの タスクに入れておくとベストプラクティスなので実行する。
scriptsにタスクを登録することができるので登録していく。
"dev": "ts-node-dev --respawn", を追加する。
 devはカスタムなもの。なんでもいい。短いとミスが起きないので省略形に　
動作確認を実施。
npm runでタスクはrunできる
npm run dev ディレクトリ名/ ファイル名.tsを実行すると
監視中なのでプロンプトは戻ってこない。

git diff -cachedでaddした変更点を見ることができる。
commit してgit push ーu origin HEADしてmasterrbanchに戻ってmergeしてpush
　
11.VS codeをダウンロードする

ブラウザからダウンロード
code pathをvs内でダウンロードすることで、
ターミナルでcodeと入力するとvsc codeが表示されるようになる。

インデントの幅は２
Prettierコードフォーマッターをダウンロードする
自動でコードが整形される
これを使用して保存時にコードの整形を自動でできるようにする方法を学ぶ

tsc(typescriptをjsに変更する時に実行されるもの)。
その時にコンパイルするオプションをつけることができる。
コマンドの引数にしたりすることができる
ts.config.jsonというファイルで指定することができる。
あらかじめコンパイル時にどうするかをまとめておいてそのルールに基づいて設定していくというもの

typescript.org/docs/handblld/tsconfig-json.htmlにドキュメントがある。
このページで詳細確認できる。

tscコマンドができると自動で作成できるので便利
npx tsc --initをワークスペースで実行
これでtscのデフォルトの値を設定したファイルを出力できる。

vs codeのtypescriptのタイプの設定を行う
閉じて、code .をターミナルに入力すると
vs codeが開き、引数にディレクトリを指定することディレクトリを読み込みつつそれをプロジェクトする状態でvsを開ける。

右下のステータスのtypescript
typescriptのプロジェクトだと判断しているということ
その横のバージョンをホバーするとパス情報を表示してくれる
vscodeの持っているバージョンを使用しているかどうかを判断できる。
グローバルな設定をすると少し困る
typescriptのバージョンを決めてやっている時にその決めたバージョンにしたいとなる。
そのバージョンがpackage,jsonに指定してある。
今回は３.７.5をインストールしている。
vs codeより新しいバージョンを使っているので仕様が異なるので合わせていく。
package.jsonのバージョンを選択すると新しいバージョンに変更できる。
自分たちのプロジェクト配下のタイプスクリプトファイルを使いますよというように変更できる。


13.ts-node-dev
tsのコンパルをサクサクする想定だったけど不具合が見つかったのでをそれを変更する。
ts-node-devを介してコンパイルしている時に、8.6.0異常だとコンパイルエラーが表示されずに実行される。
そのままだとあかんからバージョンをロールバックしてエラーが表示されるようにする。
ts-nodeが8.6.2以上だと起きるエラー表示されないので、ts-node単体だとエラーはおきるが、ts-node-devだとエラーが表示されない。
同じものが表示されないとまずいので、ts-nodeのバージョンが上がったことで出たもの。
ちゃんとエラーが表示されるようにロールバック
npm info ts-node versionsでバージョンを表示する。
相性がいいのは、8.5.4なのでそれをインストールしていく。
現状のts-nodeをuninstallする。
npm uninstall --save-dev ts-nodeで実行
次は対象のts-nodeのバージョンをインストールする。
npm install --save-dev ts-node@8.5.4の古いバージョンをインストールする。
package.jsonのバージョンも変更されている。
ts-node-devを実行してコンパイルをさせる。
npm ts-node-dev src/boolean.tsで
先ほどのファイル実行するとエラーが表示される。
これがコーディング中にきちんとリアルタイムに表示されるのが望ましい。

npmのタスクにコマンドを登録しているのでそちらも実行して確認しておく。
npm run dev src/boolean.tsを実行する。
タスクを行なってもエラーが表示されるようになった。

今までの修正文はcommitしておくこと。
