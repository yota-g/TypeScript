高度な型について学ぼう
47,型の互換性
type conpatibility 
ts独特の概念。
ある型の変数に別の型の変数が代入できる時が、互換性がある
代入できない時、互換性がない。
それがどうなのかを見ていく。

echo 'export {}'  > src/type-compatibility.ts  で作成しながら実行していく。


48.ジェネリクス
tsで非常によく見かける存在感のある型
ジェネリックの複数形。
一般的な、汎用的なという意味で使用。
汎用的なクラス、汎用的なメソッドに対して、特定の型を紐づけるための型のことを呼ぶ。　
ハンズオンで見ていく。

49.型アサーション
型は制約を強くすればそれだけ安全になる。
その型に制約を与える方法型アサーション
ある型がany型だった時。それは制約がないので型をきつくしたい。
扱っているデータの型が自明だった場合、any型から別の型に変換する事ができる。
これを型のアサーションという。どんな型にも変換できない。互換性がある事が大前提。
stringからnumerに変換することは許されない。あくまで互換性が時のみ。　
echo 'export {}'  > src/type-assertions.ts

50.constアサーション
学んだ型アサーションと名前は似ているが違う。
データの値の書き換えはしませんよというのをコンパイラーに伝えるという役割。

51.Nullable Types
ある値を設定したい時必ずしも設定したいが確定しているとは限らない事はよくある事。
人の年齢を設定したい時確かな情報がなく、とりあえずわからないという状態を設定しておきたいという場面。
不確定な状態を持ちうる変数の型を学ぶ。
echo 'export {}'  > src/nullable-types.tsで実行する。

52.インデックスシグネチャ
便利な型を確認する。
オブジェクトの添え字アクセス。
echo 'export {}'  > src/index-signatures.tsで実施する。



