12.boolean型
学んでいく
primitive 基本的な型
複雑な型をするには基本的な型の小さなものがで構成されているシンプルな型で構成されている
これは総称で、あるグループのこと。
これ以上分解できないようなシンプルな型のことを呼ぶ。

基本的なコードのこと。

まず１つ目。
１、boolean型について
echo 'export {};' > src/boolean.tsと入力
export{};をboolean.tsに入力しながら、srcの配下にファイルを作成するということ。

boolean.tsをコンパイルさせて実行させるモニター状態になるようにする。
npm rum dev src/boolean.tsを実行するとすぐに実行されて、モニター状態になる。
これで動かしながらレクチャーを進めれる。

コードを打つとファイルを監視しているので保存されると実行まで行なってくれる。
打つとすぐにエラーならエラーが出る。

typescriptの中にjsを書き放題
なぜならtypescriptはjsのスーパーセットだから。
typescriptならプログラマーが意図する変数や定数の型を:をつけて宣言することができる。
プログラムの仕様書を書くようなことが、型を書くこと。
booleanはtrue or falseしか持たないよというもの。: booleanのことを型注釈などという。アノテーションとかといったりもする。
変数はこのような意図でいくからよろしくとコンパイルに伝えているもの。

export {};はなにか。
例えば、ファイルにlet name = 'Typescript';と入力するとする。
特にエラーは出ないが、この状態でexportをコメントアウトして見ると
nameがエラーになってしまう。
エラーはcannot  redeclare block-scoped variable 'name' と表示される。
ブロックスコープの変数name を再び宣言できませんよといっている。
通常、js ではモジュールシステムを使用していないばあい、変数を宣言するとグローバル空間に定義される。
モジュールにするというのはインポートやエクスポートによってファイルをモジュールにする仕組みのこと。
exportを実行していない状態では、ファイル自体がモジュールになっていない。
グローバル空間にある変数を使用してしまう可能性がある。
案の定nameというどこかですでに宣言されているのを間違って定義して使ってしまった。
これが今起きているエラーの原因。エラーを回避するにはモジュールシステムを導入する必要がある。
ファイルをモジュール化する。export {};を入れる。
今回は空のオブジェクトをexportしている。
ファイルの先頭にexportを入力して、エラーをコンパイルする。呪文のように毎回頭に書く。





