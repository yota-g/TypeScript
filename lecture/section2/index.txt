12.boolean型
学んでいく
primitive 基本的な型
複雑な型をするには基本的な型の小さなものがで構成されているシンプルな型で構成されている
これは総称で、あるグループのこと。
これ以上分解できないようなシンプルな型のことを呼ぶ。

基本的なコードのこと。

まず１つ目。
１、boolean型について
echo 'export {};' > src/boolean.tsと入力
export{};をboolean.tsに入力しながら、srcの配下にファイルを作成するということ。

boolean.tsをコンパイルさせて実行させるモニター状態になるようにする。
npm rum dev src/boolean.tsを実行するとすぐに実行されて、モニター状態になる。
これで動かしながらレクチャーを進めれる。

コードを打つとファイルを監視しているので保存されると実行まで行なってくれる。
打つとすぐにエラーならエラーが出る。

typescriptの中にjsを書き放題
なぜならtypescriptはjsのスーパーセットだから。
typescriptならプログラマーが意図する変数や定数の型を:をつけて宣言することができる。
プログラムの仕様書を書くようなことが、型を書くこと。
booleanはtrue or falseしか持たないよというもの。: booleanのことを型注釈などという。アノテーションとかといったりもする。
変数はこのような意図でいくからよろしくとコンパイルに伝えているもの。

export {};はなにか。
例えば、ファイルにlet name = 'Typescript';と入力するとする。
特にエラーは出ないが、この状態でexportをコメントアウトして見ると
nameがエラーになってしまう。
エラーはcannot  redeclare block-scoped variable 'name' と表示される。
ブロックスコープの変数name を再び宣言できませんよといっている。
通常、js ではモジュールシステムを使用していないばあい、変数を宣言するとグローバル空間に定義される。
モジュールにするというのはインポートやエクスポートによってファイルをモジュールにする仕組みのこと。
exportを実行していない状態では、ファイル自体がモジュールになっていない。
グローバル空間にある変数を使用してしまう可能性がある。
案の定nameというどこかですでに宣言されているのを間違って定義して使ってしまった。
これが今起きているエラーの原因。エラーを回避するにはモジュールシステムを導入する必要がある。
ファイルをモジュール化する。export {};を入れる。
今回は空のオブジェクトをexportしている。
ファイルの先頭にexportを入力して、エラーをコンパイルする。呪文のように毎回頭に書く。

14.number型とstring型
echo 'export {};' > src/number-string.tsで新しいファイルを作成する
ファイルを変更していく。
まずはnumber型
その次に文字列型を確認。

let name = 'Ham';と定義したとして、
nameにホバーすると型推論が出てくる。let name: stringというように表示される。
それがあっていればコピーしてコードとして貼り付けるといい。

15.array型
ファイルの作成をしてから始める。　
echo 'export {};' > src/array.tsで作成する。

16.tuple型
配列について要素の型が明確にわかっているような配列
ただし配列方のように全ての要素の型が同一であるわけではない型のこと。
echo 'export {};' > src/tuple.tsでファイルを作成して実行

17.any型
型が不定なものを使うのは多いが、その際に使用するのはany
過去にjsで書いたものをtypescriptに書き直す時に、暫定的に指定するのが、
any型の主たる使い方。
すこし変わったことを実行していく。
nodeのaxiosというhttpクライアントを使用して外部とのサーバーとの通信をして、そのサーバーからjson形式のファイルを受け取る。
udemy-utils.herokuapp.com/api/v1/articles?token=token123 にアクセスするとJSONのファイルが表示される。
これをブラウザからではなく。axiosというライブラリを使用して取得する。

現在のaxiosの情報を確認する。
npm info axiosで確認。今回は0.20.0のバージョンと表示された。
バージョンが講義とはちがう。同じ挙動にするためにはバージョンを合わせること。
今回は、npm install axios@0.19.2でインストールを行なって使用する。
レクチャー専用のファイルを作成する。
ファイルを開いた際には axiosをimportしておく必要がある。
github axiosで調べて、axios.get (~と記載された通常処理のやり方を見ながら今回実施していく。
一時的な使用または、やむをえない場合、難しくてすぐに型を指定できない場合にしか使用しないこと。

18.void型
c言語ではおなじみのvoid型
tsでは何もデータが存在しない時に指定する。
echo 'export {};' > src/void.ts

19,null型とundefined型
null,undefinedをピンポイントで持つ場合に指定するもの。
単体で使用することはない
プリミティブ型の中で文法上存在すると認識するのがゴールになる。
echo 'export {};' > src/null-and-undefined.tsでファイルを作成して、定義していく。

20.never型
ファイルを作成して作業をしていく。
echo 'export {};'  > src/void.tsで作成

21.object型
booleanやnumberみたいに簡単ではなく、複雑。{}を格納する時に使用するもの。
echo 'export {};' > src/object.tsでファイルを作成。

22.エイリアス型　type aliases型
別名を持たせる。
oxford dictionaryで意味を調べている。
alias : used to indicate that a named person is also known or more familiar under another specified name. 
本名と芸名みたいな関係。　a.k.a also known asということ。
echo 'export {};' > src/aliases.ts


 23.interface
 tsではobjectに対してtype aliasesを使用してアノテーションを行うことができたが、
objectへのアノテーションのもう一つのやり方の紹介。interfaces
echo 'export {};' > src/interfaces.ts

24.型安全とは
jsに対して、tsは型を導入している。
型を入れている最大の理由が型安全。
型安全を担保するために導入している。
型安全を担保する利点は何か？
tsにはコンパイラーがあり、コンパイラーによって文法のチェックが入り、リアルタイムで検証される。
不正に対して、波線が表示される。appを実行する前にわかる。コンパイラーのおかげで事前にコンパイルエラーがわかる。
コンパイラーはtsの全てのコードに対して、絶え間なく検証を行っている。
まさに縁の下の力持ち。
コードを書きながら確認
echo 'export {};' > src/type-safety;


25.unknown型
型安全なany型　端的に表すと
echo 'export {}'  > src/unknown.ts
でファイルを作成して実行していく


